<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ output extension="//"#>
<#+

public string GetPrefix()
{
	return  "MSO" + ((CustomHost)Host).Model.EntityContainer.Namespace.Split('.')[1];
}

public string GetCommentHeader()
{

	return 
@"/*******************************************************************************" +
@"/* Copyright (c) Microsoft Open Technologies, Inc." +
@"/* All Rights Reserved" +
@"/* Licensed under the Apache License, Version 2.0." +
@"/* See License.txt in the project root for license information." +
@"/*" +
@"/* Warning: This code was generated automatically. Edits will be overwritten." +
@"/* To make changes to this code, please make changes to the generation framework itself:" +
@"/* https://github.com/MSOpenTech/odata-codegen" +
@"/*******************************************************************************/";
}

public string GetInterfaceLine(OdcmClass e){

	string baseEntity = e.Base == null ? "NSObject" 
					  : GetPrefix() + e.Base.Name.Substring(e.Base.Name.LastIndexOf(".") +1);
	
	var s = new StringBuilder();
	s.AppendLine("#import <Foundation/Foundation.h>");
	s.AppendLine("#import \""+GetPrefix()+"Protocols.h\"");

	if(baseEntity != "NSObject"){
		s.AppendFormat("#import \"{0}.h\"", baseEntity);
	}

	s.AppendLine().AppendLine().AppendLine(GetHeaderDoc(e.Name))
	.AppendFormat("@interface {0}{1} : {2}",GetPrefix(), e.Name, baseEntity);
	
	return s.ToString();
}

public string GetHeaderDoc(string name)
{

	var stringBuilder = new StringBuilder();
	stringBuilder.Append(@"/**");
	stringBuilder.AppendLine().AppendFormat(@"* The header for type {0}.",name);
    stringBuilder.AppendLine().AppendLine(@"*/");

    return stringBuilder.ToString();
}

public string GetImplementationDoc(string name)
{

	var stringBuilder = new StringBuilder();
	stringBuilder.Append(@"/**");
	stringBuilder.AppendLine().AppendFormat(@"* The implementation file for type {0}.",name);
    stringBuilder.AppendLine().AppendLine(@"*/");
	
	return stringBuilder.ToString();
}

public string GetMethodDoc(string name, List<OdcmProperty> parameters)
{
	return "";
}

public string GetParams(IEnumerable<OdcmProperty> parameters)
{
	string param = ": ";
	
	foreach(var p in parameters){

		if(p.IsComplex()){
			param += string.Format("({0} *) {1} : ", p.GetFullType(), p.Name.ToLowerFirstChar());
		}
		else{
			param += string.Format("({0}) {1} : ",p.GetFullType(), p.Name.ToLowerFirstChar());
		}
	}

	return param;
}

public string GetParamsForRaw(IEnumerable<string> parameters)
{
	string param = ": ";
	
	foreach(var p in parameters){
			param += string.Format("(NSString*) {0} : ", p.ToLowerFirstChar());
	}

	return param;
}

public string GetParam(OdcmProperty type)
{
	if(type.IsComplex()){
		return type.IsSystem() ? string.Empty : type.GetTypeString() + " *" + type.Name.ToLowerFirstChar();
	}

	return type.GetTypeString() + " " + type.Name;
}

public string GetParamRaw(string type)
{
		return "NSString*" + type.ToLowerFirstChar();

}

public string GetType(OdcmType type)
{
	if(type.IsComplex()){
		return type.IsSystem() ? string.Empty : type.GetTypeString() + " *";
	}

	return type.GetTypeString();
}

public string GetImportsClass(List<OdcmProperty> references)
{
	var imports = new StringBuilder();
	var classes = new StringBuilder();
	foreach(var r in references){
		if(r.Type is OdcmEnum){
			imports.AppendFormat("#import \"{0}{1}.h\"", GetPrefix(), r.Name).AppendLine();
		}else{
			classes.AppendFormat("@class {0}{1};",GetPrefix(), r.Name).AppendLine();
		}
	}
	return classes.ToString() + imports.ToString();
}

public string GetClass(OdcmProperty type)
{

	return type.IsComplex() ? string.Format("[{0}{1} class]",GetPrefix(), type.GetTypeString()) : "nil";
}

public string GetParametersToJsonRaw(IEnumerable<string> parameters)
{
	if(!parameters.Any()) { return string.Empty;}
	
	var result = new StringBuilder();

	result.Append("NSArray* parameters = [[NSArray alloc] initWithObjects:");
	
	foreach(var name in parameters){
		result.AppendLine().Append("\t").AppendFormat("[[NSDictionary alloc] initWithObjectsAndKeys :{0},@\"{1}\",nil ],",name.ToLowerFirstChar(),name);
	}

	result.AppendLine("nil];");
	

	result.AppendLine().Append("\t").Append("NSData* payload = " + (!parameters.Any() ? "nil;" :"[[MSODataBaseContainerHelper generatePayload:parameters :[self getResolver]]dataUsingEncoding:NSUTF8StringEncoding];"));
	result.AppendLine().AppendLine("[request setContent:payload];");
	return result.ToString();
}

public string GetParametersToJson(List<OdcmParameter> parameters)
{
	if(!parameters.Any()) { return string.Empty;}
	
	var result = new StringBuilder();
	
	foreach(var param in parameters){

		if(param.Type.GetTypeString() == "bool"){
			result.AppendLine().Append("\t").AppendFormat("NSString * {0}String = [[[self getResolver] getJsonSerializer] serialize:({0} ? @\"true\" : @\"false\") : @\"{1}\"];",param.Name.ToLowerFirstChar(),param.Name);
        }
		else if(param.Type.GetTypeString() == "int"){
			result.AppendLine().Append("\t").AppendFormat("NSString * {0}String = [[[self getResolver] getJsonSerializer] serialize:[[NSString alloc] initWithFormat:@\"%d\", {0}],@\"{1}\"],",param.Name.ToLowerFirstChar(),param.Name);
		}
		else{
			result.AppendLine().Append("\t").AppendFormat("NSString * {0}String = [[[self getResolver] getJsonSerializer] serialize:{0} : @\"{1}\"];",param.Name.ToLowerFirstChar(),param.Name);	
		}  
		
	}

	return result.ToString();
}

public string GetParametersForRawCall(IEnumerable<String> parameters)
{
	if(!parameters.Any()) { return string.Empty;}
	
	var result = new StringBuilder();
	result.Append("\t");
	foreach(var param in parameters){
		result.AppendFormat(": {0}String", param.ToLowerFirstChar()); 
	}

	return result.ToString();
}

public string GetFunctionParameters(List<OdcmParameter> parameters)
{
	var result = new StringBuilder();
	//&&NSDictionary* params = [[NSDictionary alloc] initWithObjectsAndKeys :path,@"path",nil ];

	if(parameters.Any()){
		result.Append("NSDictionary* params = [[NSDictionary alloc] initWithObjectsAndKeys:");
	}
	else{
		result.Append("NSDictionary* params = nil;");
	}
	foreach(var param in parameters){

		if(param.Type.GetTypeString() == "bool"){
			result.AppendFormat("{0} ? @\"true\" : @\"false\",", param.Name.ToLowerFirstChar());
			result.AppendFormat("@\"{0}\"",param.Name);
        }
		else if(param.Type.GetTypeString() == "int"){
			result.AppendFormat("[[NSString alloc] initWithFormat:@\"%d\", {0}],", param.Name.ToLowerFirstChar());
			result.AppendFormat("@\"{0}\"",param.Name);
		}
		else{
			result.AppendFormat("{0},", param.Name.ToLowerFirstChar());
			result.AppendFormat("@\"{0}\",",param.Name);
		}                    
		
	}

	if(parameters.Any()){
		result.AppendLine("nil];");
	}
		
	return result.ToString();
}

public string CreateEndOfFile(string name)
{
	return string.Format("/n{0} EndOfFile",name);
}	

public string GetParamsString(List<OdcmParameter> parameters){

	string param = ": ";
	
	foreach(OdcmParameter p in parameters){

		if(p.Type.IsComplex()){
			param += string.Format("({0} *) {1} : ", p.Type.GetFullType(), p.Name.ToLowerFirstChar());
		}
		else{
			param += string.Format("({0}) {1} : ",p.Type.GetFullType(), p.Name.ToLowerFirstChar());
		}
	}

	return param;
}

public string GetParamString(OdcmType p){

	if(p == null) return string.Empty;
	if(p.IsComplex()){
		return p.IsSystem() ? string.Empty : p.GetTypeString() + " *" + p.Name.ToLowerFirstChar();
	}

	return p.GetTypeString() + " " + p.Name;
}

public string GetMethodHeader(OdcmMethod action)
{
	var returnString = action.ReturnType == null ? "" : GetParamString(action.ReturnType);
	return string.Format("-(NSURLSessionDataTask*) {0} {1} (^)({2}, MSODataException *error)) callback;",
	action.Name.ToLowerFirstChar(),GetParamsString(action.Parameters),returnString );	
}

public string GetMethodHeaderRaw(OdcmMethod action)
{
	var returnString = action.ReturnType == null ? "" : GetParamString(action.ReturnType);
	return string.Format("-(NSURLSessionDataTask*) {0}Raw {1} (^)({2}, MSODataException *error)) callback;",
	action.Name.ToLowerFirstChar(),
	GetParamsForRaw(action.Parameters.Select(p => p.Name)),(action.ReturnType == null ? "NSString* resultCode " : GetParamRaw(action.ReturnType.Name)));	
}
#>